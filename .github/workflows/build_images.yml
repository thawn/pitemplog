on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
jobs:
  pi-gen-templog:
    runs-on: ubuntu-latest
    steps:
      # Create a stage 'pitemplog' instructing to add Nodesource repo and install nodejs as dependency
      - name: checkout repo
        uses: actions/checkout@v4
        with:
            path: pitemplog/package-pitemplog/files

      - name: install pitemplog
        run: |
          sudo apt-get install -y grunt npm git
          sudo apt-get install -y --no-install-recommends jekyll
          current_dir=$(pwd)
          cd pitemplog/package-pitemplog/files
          npm install
          grunt
          chmod a+x build/_bin/install.sh
          cd "${current_dir}"

      - name: set up pi-gen steps
        run: |
          mkdir -p clean-stage &&
          {
          cat > clean-stage/prerun.sh <<-EOF
          #!/bin/bash
          rm -f ${{ github.workspace }}/pi-gen/stage2/EXPORT*
          EOF
          } &&
          chmod +x clean-stage/prerun.sh &&      
          mkdir -p pitemplog/package-pitemplog &&
          echo "mariadb-server apache2 php php-mysql php-curl python3-mysqldb python3-yaml" > pitemplog/package-pitemplog/00-packages &&
          echo "jekyll" >> pitemplog/package-pitemplog/01-packages-nr &&
          {
          cat > pitemplog/package-pitemplog/02-run.sh <<-EOF
          #!/bin/bash
          echo "ROOTFS_DIR: ${ROOTFS_DIR}"
          echo "current_dir: $(pwd)"
          mkdir -p "${ROOTFS_DIR}/usr/local/share/templog"
          ls -la files/build
          ls -la files/build/_bin
          ls -la files/build/_sbin
          cp -r files/build/* "${ROOTFS_DIR}/usr/local/share/templog/"
          chmod a+x "${ROOTFS_DIR}/usr/local/share/templog/_bin/*.sh"
          chmod a+x "${ROOTFS_DIR}/usr/local/share/templog/_bin/*.py"
          chmod u+x "${ROOTFS_DIR}/usr/local/share/templog/_sbin/*.sh"
          ls -la "${ROOTFS_DIR}/usr/local/share/templog/"
          ls -la "${ROOTFS_DIR}/usr/local/share/templog/_bin"
          ls -la "${ROOTFS_DIR}/usr/local/share/templog/_sbin"
          EOF
          } &&
          chmod +x pitemplog/package-pitemplog/02-run.sh &&
          {
          cat > pitemplog/package-pitemplog/03-run-chroot.sh <<-EOF
          #!/bin/bash
          ls -la /usr/local/
          ls -la /usr/local/share/
          ls -la /usr/local/share/templog
          ls -la /usr/local/share/templog/_bin
          chmod a+x /usr/local/share/templog/_bin/*.sh
          chmod a+x /usr/local/share/templog/_bin/*.py
          chmod u+x /usr/local/share/templog/_sbin/*.sh
          ls -la /usr/local/share/templog/_bin
          ls -la /usr/local/share/templog/_sbin
          /usr/local/share/templog/_bin/install.sh
          mysql < /usr/local/share/templog/_bin/create_database.sql
          update-rc.d setup_timesyncd defaults
          raspi-config nonint do_memory_split 16
          raspi-config nonint do_onewire 1
          EOF
          } &&
          chmod +x pitemplog/package-pitemplog/03-run-chroot.sh &&
          {
          cat > pitemplog/prerun.sh <<-EOF
          #!/bin/bash -e
          if [ ! -d "${ROOTFS_DIR}" ]; then
            copy_previous
          fi
          echo "ROOTFS_DIR: ${ROOTFS_DIR}"
          echo "PREV_ROOTFS_DIR: ${PREV_ROOTFS_DIR}"
          echo "STAGE_WORK_DIR: $STAGE_WORK_DIR"
          echo "WORK_DIR: ${WORK_DIR}"
          echo "STAGE: ${STAGE}"
          EOF
          } &&
          chmod +x pitemplog/prerun.sh &&
          {
          cat > pitemplog/EXPORT_IMAGE <<-EOF
          IMG_SUFFIX="-nousb"
          if [ "${USE_QEMU}" = "1" ]; then
              export IMG_SUFFIX="${IMG_SUFFIX}-qemu"
          fi
          EOF
          } &&
          mkdir -p pitemplog-USB/package-pitemplog-USB/ &&
          {
          cat > pitemplog-USB/package-pitemplog-USB/00-run-chroot.sh <<-EOF
          #!/bin/bash
          /usr/local/share/templog/_sbin/setup_usb_storage.sh
          EOF
          } &&
          chmod +x pitemplog-USB/package-pitemplog-USB/00-run-chroot.sh &&
          {
          cat > pitemplog-USB/prerun.sh <<-EOF
          #!/bin/bash -e
          if [ ! -d "${ROOTFS_DIR}" ]; then
            copy_previous
          fi
          EOF
          } &&
          chmod +x pitemplog-USB/prerun.sh &&
          {
          cat > pitemplog-USB/EXPORT_IMAGE <<-EOF
          IMG_SUFFIX=""
          if [ "${USE_QEMU}" = "1" ]; then
              export IMG_SUFFIX="${IMG_SUFFIX}-qemu"
          fi
          EOF
          }

      - run: tree

      - uses: usimd/pi-gen-action@v1
        id: build
        with:
          image-name: raspi-templog
          stage-list: clean-stage stage0 stage1 stage2 ./pitemplog ./pitemplog-USB
          password: 'raspberry'
          hostname: pitemplog
          pi-gen-release: pitemplog
          pi-gen-dir: pi-gen
          timezone: Europe/Berlin
          compression: gz
          compression-level: 6
          username: pi
          disable-first-boot-user-rename: 1
          export-last-stage-only: true
          verbose-output: true

      - uses: actions/upload-artifact@v4
        with:
          name: pitemplog-image
          path: ${{ steps.build.outputs.image-path }}